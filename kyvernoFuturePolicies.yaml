apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: block-subscription-creation
spec:
  validationFailureAction: Enforce
  rules:
    - name: deny-subscription-create
      match:
        resources:
          kinds:
            - operators.coreos.com/Subscription
          operations:
            - CREATE
      validate:
        message: "Creation of Subscription resources is not allowed."
        deny: {}
---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-default-securitycontext
  annotations:
    policies.kyverno.io/title: Add Default securityContext
    policies.kyverno.io/category: Sample
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      A Pod securityContext entry defines fields such as the user and group which should be used to run the Pod.
      Sometimes choosing default values for users rather than blocking is a better alternative to not impede
      such Pod definitions. This policy will mutate a Pod to set `runAsNonRoot`, `runAsUser`, `runAsGroup`, and 
      `fsGroup` fields within the Pod securityContext if they are not already set.
spec:
  rules:
  - name: add-default-securitycontext
    match:
      any:
      - resources:
          kinds:
          - Pod
    mutate:
      patchStrategicMerge:
        spec:
          securityContext:
            +(runAsNonRoot): true
            +(runAsUser): 1000
            +(runAsGroup): 3000
            +(fsGroup): 2000

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-security-context-constraint-anyuid
  annotations:
    policies.kyverno.io/title: Disallow use of the SecurityContextConstraint (SCC) anyuid
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.20"
    policies.kyverno.io/subject: Role,ClusterRole,RBAC
    policies.kyverno.io/description: >-
      Disallow the use of the SecurityContextConstraint (SCC) anyuid which allows a pod to run with the UID as declared in the image instead of a random UID
spec:
  validationFailureAction: Enforce
  background: true
  rules:
  - name: check-security-context-constraint
    match:
      any:
      - resources:
          kinds:
          - ClusterRole
          - Role
    validate:
      message: >-
        Use of the SecurityContextConstraint (SCC) anyuid is not allowed
      foreach:
      - list: request.object.rules[]
        deny:
          conditions:
            all:
            - key: anyuid
              operator: AnyIn
              value: "{{element.resourceNames[]}}"
            - key: "{{ element.verbs[]  | contains(@, 'use') || contains(@, '*') }}"
              operator: Equals
              value: true
  - name: check-security-context-roleref
    match:
      any:
      - resources:
          kinds:
          - ClusterRoleBinding
          - RoleBinding
    validate:
      message: >-
        Use of the SecurityContextConstraint (SCC) anyuid is not allowed
      deny:
        conditions:
          all:
          - key: system:openshift:scc:anyuid
            operator: Equals
            value: "{{request.object.roleRef.name}}"

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privileged-containers
  annotations:
    policies.kyverno.io/title: Disallow Privileged Containers
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Privileged mode disables most security mechanisms and must not be allowed. This policy
      ensures Pods do not call for privileged mode.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: privileged-containers
      match:
        any:
        - resources:
            kinds:
              - Pod
      validate:
        message: >-
          Privileged mode is disallowed. The fields spec.containers[*].securityContext.privileged,
          spec.initContainers[*].securityContext.privileged, and spec.ephemeralContainers[*].securityContext.privileged must be unset or set to `false`.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(privileged): "false"
            =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
            containers:
              - =(securityContext):
                  =(privileged): "false"

---
